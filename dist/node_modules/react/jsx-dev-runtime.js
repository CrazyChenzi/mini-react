(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-dev-runtime"] = {}));
})(this, (function (exports) { 'use strict';

  // packages/shared/ReactSymbols.ts
  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  // 表示普通的 React 元素，即通过 JSX 创建的组件或 DOM 元素
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for('react.element')
      : 0xeac7;
  // 表示 Fragment 组件，即 <React.Fragment> 或短语法 <></> 创建的 Fragment
  const REACT_FRAGMENT_TYPE = supportSymbol
      ? Symbol.for('react.fragment')
      : 0xeacb;

  /* eslint-disable @typescript-eslint/no-explicit-any */
  // packages/react/src/jsx.ts
  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          __mark: 'mini'
      };
      return element;
  };
  const Fragment = REACT_FRAGMENT_TYPE;
  /*
  输入示例:
  jsx('div', { key: 'uniqueKey', ref: someRef }, 'Child 1', 'Child 2')

  输出示例:
  {
      $$typeof: REACT_ELEMENT_TYPE,
      type: 'div',
      key: 'uniqueKey',
      ref: someRef,
      props: {
          children: ['Child 1', 'Child 2']
          __mark: 'mini'
      }
  }
  */
  const jsx = (type, config, ...children) => {
      let key = null;
      let ref = null;
      const props = {};
      for (const prop in config) {
          const val = config[prop];
          if (prop === 'key') {
              if (val !== undefined) {
                  key = '' + val;
              }
              continue;
          }
          if (prop === 'ref') {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      const childrenLength = children.length;
      if (childrenLength) {
          if (childrenLength === 1) {
              props.children = children[0];
          }
          else {
              props.children = children;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  /*
  输入示例:
  jsxDEV('div', { key: 'uniqueKey', ref: someRef, className: 'my-class' })

  输出示例:
  {
      $$typeof: REACT_ELEMENT_TYPE,
      type: 'div',
      key: 'uniqueKey',
      ref: someRef,
      props: {
          className: 'my-class'
      }
  }
  */
  /** 开发环境不处理 children 参数，方便多做一些额外的检查 */
  const jsxDEV = (type, config) => {
      let key = null;
      let ref = null;
      const props = {};
      for (const prop in config) {
          const val = config[prop];
          if (prop === 'key') {
              if (val !== undefined) {
                  key = '' + val;
              }
              continue;
          }
          if (prop === 'ref') {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  function isValidElement(object) {
      return (typeof object === 'object' &&
          object !== null &&
          object.$$typeof === REACT_ELEMENT_TYPE);
  }

  exports.Fragment = Fragment;
  exports.isValidElement = isValidElement;
  exports.jsx = jsx;
  exports.jsxDEV = jsxDEV;

}));
