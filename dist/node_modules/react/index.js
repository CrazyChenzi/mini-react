(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

  const currentDispatcher = {
      current: null
  };
  const resolveDispatcher = () => {
      const dispatcher = currentDispatcher.current;
      if (dispatcher == null) {
          throw new Error('Hooks 只能在函数组件中执行');
      }
      return dispatcher;
  };

  // packages/shared/ReactSymbols.ts
  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  // 表示普通的 React 元素，即通过 JSX 创建的组件或 DOM 元素
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for('react.element')
      : 0xeac7;

  /* eslint-disable @typescript-eslint/no-explicit-any */
  // packages/react/src/jsx.ts
  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          __mark: 'mini'
      };
      return element;
  };
  /*
  输入示例:
  jsxDEV('div', { key: 'uniqueKey', ref: someRef, className: 'my-class' })

  输出示例:
  {
      $$typeof: REACT_ELEMENT_TYPE,
      type: 'div',
      key: 'uniqueKey',
      ref: someRef,
      props: {
          className: 'my-class'
      }
  }
  */
  /** 开发环境不处理 children 参数，方便多做一些额外的检查 */
  const jsxDEV = (type, config) => {
      let key = null;
      let ref = null;
      const props = {};
      for (const prop in config) {
          const val = config[prop];
          if (prop === 'key') {
              if (val !== undefined) {
                  key = '' + val;
              }
              continue;
          }
          if (prop === 'ref') {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  function isValidElement$1(object) {
      return (typeof object === 'object' &&
          object !== null &&
          object.$$typeof === REACT_ELEMENT_TYPE);
  }

  // React
  const useState = (initialState) => {
      const dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
  };
  // 内部数据共享层
  const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
      currentDispatcher
  };
  const version = '1.0.0';
  const createElement = jsxDEV;
  const isValidElement = isValidElement$1;

  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  exports.createElement = createElement;
  exports.isValidElement = isValidElement;
  exports.useState = useState;
  exports.version = version;

}));
